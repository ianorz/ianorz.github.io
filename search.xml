<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo基本使用</title>
      <link href="/2021/12/09/hexo-ming-ling/"/>
      <url>/2021/12/09/hexo-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>hexo本质上是将markdown文件通过一系列规则渲染成HTML网页格式并发布到远端服务器的集成工具</p><h2 id="符号解释"><a href="#符号解释" class="headerlink" title="符号解释"></a>符号解释</h2><p><code>[a]</code>表示<code>a</code>是可以缺省的，此时会以默认值代替</p><p><code>&lt;b&gt;</code>表示该位置是可变的，<code>b</code>是该部分应填的内容名称，不可缺省</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><pre class=" language-shell"><code class="language-shell"># 简写hexo n [layout] <title># 全写hexo new [layout] <title># 示例# 此命令会在_post文件夹新建一个me.mdhexo n "me"</code></pre><p>该命令会以<code>layout</code>布局新建一个名为<code>title</code>的 文章，如果<code>layout</code>缺省，默认为<code>post</code>。标题的引号不是必须的，如果标题包含空格，则必须用引号括起来。</p><p><code>layout</code>包含三种默认布局(post, page, draft)和自定义布局，三种默认布局的模板文件都存在<code>scaffolds</code>文件夹中，新建文章时，hexo会按照指定布局模板的文件内容来填充新建的文件。</p><ul><li><code>post</code>：在<code>_post</code>文件夹新建文件，作为帖子</li><li><code>page</code>：在<code>source</code>文件夹新建<code>title</code>文件夹，并在该文件夹中新建一个<code>index.md</code>，作为新页面</li><li><code>draft</code>：待补充</li></ul><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--path</code></td><td>自定义新建文章的路径</td></tr><tr><td><code>-r</code>, <code>--replace</code></td><td>存在同名文章时替换文件</td></tr><tr><td><code>-s</code>, <code>--slug</code></td><td>文章的Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><pre class=" language-shell"><code class="language-shell"># -p用法# 该命令会在source/about下创建一个me.md，同时文章的标题被设为About mehexo new page -p about/me "About me"</code></pre><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><h3 id="基础用法-1"><a href="#基础用法-1" class="headerlink" title="基础用法"></a>基础用法</h3><pre class=" language-shell"><code class="language-shell"># 简写hexo g# 全写hexo generate</code></pre><p>生成静态页面文件，发布博客必需步骤</p><h3 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h3><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>, <code>--deploy</code></td><td>文件生成后立即部署网站，等价于<code>hexo generate &amp;&amp; hexo deploy </code></td></tr><tr><td><code>-w</code>, <code>--watch</code></td><td>监视文件变动，不等同于<code>hexo s</code></td></tr><tr><td><code>-b</code>, <code>--bail</code></td><td>生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td><code>-f</code>, <code>--force</code></td><td>重新生成页面，基本等价于 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td><code>-c</code>, <code>--concurrency</code></td><td>最大同时生成文件的数量，默认无限制</td></tr></tbody></table><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><pre class=" language-shell"><code class="language-shell">hexo publish [layout] <filename></code></pre><p>发表草稿，还没用过</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><h3 id="基础用法-2"><a href="#基础用法-2" class="headerlink" title="基础用法"></a>基础用法</h3><pre class=" language-shell"><code class="language-shell"># 简写hexo s# 全写hexo server</code></pre><p>启动服务器进行本地预览。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><p>最常用命令，其实可以在不进行<code>hexo g</code>的情况下使用，可以动态监视改动并刷新页面。</p><h3 id="选项-2"><a href="#选项-2" class="headerlink" title="选项"></a>选项</h3><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--port</code></td><td>重设访问端口</td></tr><tr><td><code>-s</code>, <code>--static</code></td><td>只使用静态文件</td></tr><tr><td><code>-l</code>, <code>--log</code></td><td>启动log记录修改，使用覆盖记录格式</td></tr></tbody></table><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><h3 id="基础用法-3"><a href="#基础用法-3" class="headerlink" title="基础用法"></a>基础用法</h3><pre class=" language-shell"><code class="language-shell"># 简写hexo d# 全写hexo deploy</code></pre><p>将页面部署到远程网站，发布博客必需步骤</p><h3 id="选项-3"><a href="#选项-3" class="headerlink" title="选项"></a>选项</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>, <code>--generate</code></td><td>部署之前先生成静态文件，等价于<code>hexo generate &amp;&amp; hexo deploy </code></td></tr></tbody></table><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><p>没用过，以后再说</p><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><p>没用过，以后再说</p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><pre class=" language-shell"><code class="language-shell"># 简写hexo cl# 全写hexo clean</code></pre><p>清除缓存文件，删除<code>public</code>文件夹</p><p>总之发现更改不生效先试试<code>hexo clean</code>和删除浏览器缓存，还不行就删了<code>deploy.git</code>文件夹。以及发布是有延迟的，有时候等一会就好了。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><pre class=" language-shell"><code class="language-shell"># 简写hexo l <type># 全写hexo list <type></code></pre><p>列出网站资料，其中<code>&lt;type&gt;</code>可以是 <code>page</code>,<code> post</code>, <code>route</code>, <code>tag</code>, <code>category</code></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>在点进详情页前的预览界面会显示固定长度的字符，使用<code>&lt;!-- more --&gt;</code>来界定摘要和正文</p><p><code>&lt;!-- more --&gt;</code>前的正文内容会在首页看到，其后的内容只有点进详情页才能看到。</p><p>也可以通过Front-matter中的summary字段设置</p><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>每篇博客的头部配置选项</p><p>此处为matery主题支持的配置</p><table><thead><tr><th>选项</th><th>默认</th><th>Description</th></tr></thead><tbody><tr><td>title</td><td>md文件名</td><td>帖子标题，必填项</td></tr><tr><td>date</td><td>文章创建时间</td><td>帖子发布时间，必填项，尽量确保每篇帖子都不一样</td></tr><tr><td>author</td><td>根目录中的<code>_config.yml</code>里面的author字段</td><td>帖子作者，每篇文章都可以单独设置</td></tr><tr><td>img</td><td><code>featureImages</code>中的一个值</td><td>似乎是指定封面页</td></tr><tr><td>top</td><td><code>true</code></td><td>置顶推荐位</td></tr><tr><td>hide</td><td><code>false</code></td><td>是否在主页显示，<code>true</code>则不显示</td></tr><tr><td>cover</td><td><code>false</code></td><td>该帖子是否被加入主页轮播封面</td></tr><tr><td>coverImg</td><td>null</td><td>上面属性用到的图片URL</td></tr><tr><td>password</td><td>null</td><td>如果在主题配置文件中设置了加密选项，可以在这里设置密码，使用<code>SHA256</code>加密。</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启目录</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式渲染，需要在主题配置文件打开相应配置</td></tr><tr><td>summary</td><td>null</td><td>帖子摘要，不开启则在正文选取</td></tr><tr><td>categories</td><td>null</td><td>帖子分类，一篇文章建议只有一个类别</td></tr><tr><td>tags</td><td>null</td><td>帖子标签，一篇文章可以有多个标签</td></tr><tr><td>keywords</td><td>Post Title</td><td>帖子关键字</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>知识共享协议，可以是以下之一 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint and pay</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://hexo.io/zh-cn/docs/commands.html">指令 | Hexo</a></p><p><a href="https://zhuanlan.zhihu.com/p/85037427">Hexo系列 | Hexo的基本使用</a></p><p><a href="https://zhuanlan.zhihu.com/p/20641764">“知识共享”（CC协议）简单介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/08/hello-world/"/>
      <url>/2021/12/08/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </code></pre><h2 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h2><pre class=" language-c++"><code class="language-c++">#include <iostream> using namespace std;int main()  {   cout << "Hello,World!" << endl;  return 0;} </code></pre><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  </code></pre><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span></code></pre><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><pre class=" language-ruby"><code class="language-ruby">print <span class="token string">"Hello World!"</span></code></pre><h2 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h2><pre class=" language-c#"><code class="language-c#">using System;  class TestApp  {    public static void Main()    {      Console.WriteLine("Hello,World!");      Console.ReadKey();  }  }  </code></pre><h2 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h2><pre class=" language-objective-c"><code class="language-objective-c">#import <Foundation/Foundation.h>int main(int argc, char *argv[]) {    @autoreleasepool {        NSLog(@"Hello World!");    }   return 0;}</code></pre><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>      <span class="token keyword">echo</span> <span class="token string">"Hello,World!"</span><span class="token punctuation">;</span>      <span class="token keyword">echo</span> <span class="token string">"The best program language around world!"</span><span class="token punctuation">;</span><span class="token delimiter">?></span>  </code></pre><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> sys <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sys"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sys<span class="token punctuation">.</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><pre class=" language-R"><code class="language-R">print("Hello World!")</code></pre><h2 id="MATLAB"><a href="#MATLAB" class="headerlink" title="MATLAB"></a>MATLAB</h2><pre class=" language-matlab"><code class="language-matlab"><span class="token keyword">function</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">disp</span><span class="token punctuation">(</span><span class="token string">'Hello,World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span></code></pre><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><pre class=" language-SQL"><code class="language-SQL">select 'Hello,World!' from dual;</code></pre><h2 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h2><pre class=" language-perl"><code class="language-perl"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span></code></pre><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello,World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="VB"><a href="#VB" class="headerlink" title="VB"></a>VB</h2><pre class=" language-VB"><code class="language-VB">Module Hello      Sub Main()    MsgBox("Hello,World!")    End Sub  End Module</code></pre><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><pre class=" language-scala"><code class="language-scala">println<span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><pre class=" language-shell"><code class="language-shell">>> echo "Hello,World!"</code></pre><h2 id="Pascal"><a href="#Pascal" class="headerlink" title="Pascal"></a>Pascal</h2><pre class=" language-pascal"><code class="language-pascal"><span class="token keyword">Program</span> HelloWorld<span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">begin</span>    writeln<span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span> <span class="token keyword">end</span><span class="token punctuation">.</span></code></pre><h2 id="Assembly"><a href="#Assembly" class="headerlink" title="Assembly"></a>Assembly</h2><pre class=" language-assembly"><code class="language-assembly">data segment    string db 'Hello,World!$'data endscode segment assume cs:code,ds:datastart:    mov ax,data     mov ds,ax    mov dx,offset string    mov ah,9    int 21h    mov ah,4ch    int 21hcode endsend start</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programing </tag>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> Java </tag>
            
            <tag> PHP </tag>
            
            <tag> SQL </tag>
            
            <tag> MATLAB </tag>
            
            <tag> C </tag>
            
            <tag> HTML </tag>
            
            <tag> Assembly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First blog</title>
      <link href="/2021/12/08/first/"/>
      <url>/2021/12/08/first/</url>
      
        <content type="html"><![CDATA[<p>This is my first blog.</p><span id="more"></span><p>这个博主自己也不知道能写出来什么东西~</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
